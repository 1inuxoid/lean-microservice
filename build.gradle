import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        kotlin_version = '1.2.50'
        spekVersion = "1.1.5"
        joobyVersion = "1.4.1"
        junit_version = "5.0.2"
        jooqVersion = "3.10.7"
        h2Version = "1.4.196"
        dokka_version = "0.9.14"
        security_version = "6.0.0-20180709123222-78892d2"
        eurekaclient_version = "3.0.0-20180627120605-73c7b32"
        cucumber_version = "2.3.1"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    def credentialStorageScript = new File(System.properties["user.home"], ".ti8m-forge/credentials-storage.gradle")
    assert credentialStorageScript.exists(): "Please, apply the credential-storage.gradle file as described in  https://gitlab.ti8m.ch/ti8m-forge/gradle-credentials !"

    apply from: credentialStorageScript.absolutePath

    dependencies {
        classpath "org.liquibase:liquibase-groovy-dsl:1.2.2"
        classpath 'com.h2database:h2:1.4.192'
        classpath "org.jooby:jooby-gradle-plugin:$joobyVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.2'
    }
}

plugins {
    id "war"
    id "org.jetbrains.kotlin.jvm" version "1.2.10"
    id 'org.liquibase.gradle' version '1.2.4'
    id 'nu.studer.jooq' version '2.0.9'
    id "com.github.johnrengelman.shadow" version "2.0.2"
    id "com.palantir.git-version" version "0.10.1"
    id "au.com.dius.pact" version "3.5.11"
}

apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'liquibase'

apply plugin: "jooby"

static def dateTime() {
    def date = new Date()
    return date.format('yyyyMMddHHmmss')
}

def gitFromCliVersion() {
    return "git rev-parse --short HEAD".execute().text.trim()
}

def envVar(name) {
    def val = System.getenv(name)
    return val == null ? "x" : val
}

def rawVersion = baseVersion + "-" + dateTime() + "-" + gitFromCliVersion()
def nexus_url = 'https://nexus.ti8m.ch/content/repositories/channelbank-release/'


allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'maven'

    group 'ch.ti8m.channelsuite'
    version = rawVersion

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name "channelsuite"
            credentials {
                username getRepoUsername("nexus.ti8m.ch")
                password getRepoPassword("nexus.ti8m.ch")
            }
            url nexus_url
        }
    }


    dependencies {
        testCompile 'org.hamcrest:hamcrest-core:1.3'
        testCompile "org.junit.jupiter:junit-jupiter-api:$junit_version"
        testCompile "org.junit.jupiter:junit-jupiter-params:$junit_version"
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testCompile 'org.mockito:mockito-core:2.8.47'
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_version"
        testCompile "io.cucumber:cucumber-java:$cucumber_version"
        testCompile "io.cucumber:cucumber-junit:$cucumber_version"

        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    }
    dokka {
        includes = ['Module.md']
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }
}

configurations {
    // dependency config for running inside a servlet container.
    servletContainer { transitive = false }
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

subprojects {
    group = 'ch.ti8m.channelsuite.kotlin.libs'

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: nexus_url) {
                    authentication(userName: getRepoUsername("nexus.ti8m.ch"), password: getRepoPassword("nexus.ti8m.ch"))
                }
            }
        }
    }
}

project(':libs:log') {
    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.25'
    }
}

project(':libs:security'){
    dependencies {
        def withoutCruft = {
            exclude group: 'org.springframework', module: '*'
            exclude group: 'org.bouncycastle', module: '*'
            exclude group: 'org.apache.velocity', module: '*'
        }
        compile "ch.ti8m.channelsuite.security:security-api-core:$security_version", withoutCruft
        compile "ch.ti8m.channelsuite.security:saml-based-token-core:$security_version", withoutCruft
        compile "ch.ti8m.channelsuite.security:jwt-based-token-core:$security_version", withoutCruft
        compile "ch.ti8m.channelsuite.security:rest-identity-propagator-core:$security_version", withoutCruft
        compile project(':libs:log')
    }
}

project(':libs:eurekaclient') {
    dependencies {
        compile project(':libs:log')
        compile project(':libs:security')
        compile "ch.ti8m.channelsuite.serviceregistry:eureka-client-core:$eurekaclient_version"
    }
}

project(':libs:kooby-jooq') {

    dependencies {
        compile 'io.github.config4k:config4k:0.3.4'
        compile 'com.zaxxer:HikariCP:2.7.4'
        compile 'org.postgresql:postgresql:9.4.1212'
        compile 'org.liquibase:liquibase-core:3.5.3'
        compile 'com.mattbertolini:liquibase-slf4j:2.0.0'
        compile "org.jooby:jooby-lang-kotlin:$joobyVersion"
        compile "org.jooby:jooby-metrics:$joobyVersion"

        compileOnly "com.h2database:h2:$h2Version"
        compile "org.jooq.trial:jooq:$jooqVersion"

        compile project(':libs:security')
        compile project(':libs:eurekaclient')
    }
}

project(':libs:okhttp') {
    dependencies {
        compile project(':libs:security')
        compile project(':libs:eurekaclient')
        compile 'com.squareup.okhttp3:okhttp:3.9.1'
        compile "org.jooby:jooby-lang-kotlin:$joobyVersion"
    }
}

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile project(':libs:log')
    compile project(':libs:kooby-jooq')
    compile "org.jooby:jooby-lang-kotlin:$joobyVersion"
    compile "org.jooby:jooby-netty:$joobyVersion"
    compile "org.jooby:jooby-jackson:$joobyVersion"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"
    compile "org.jooby:jooby-apitool:$joobyVersion"
    compile 'com.squareup.okhttp3:okhttp:3.9.1'

    runtime "com.h2database:h2:$h2Version"

    jooqRuntime "com.h2database:h2:$h2Version"

    servletContainer "org.jooby:jooby-servlet:$joobyVersion"

    testCompile 'io.rest-assured:rest-assured:3.0.6'
    testCompile 'au.com.dius:pact-jvm-consumer-junit_2.12:3.5.11'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task copyWebInf(type: Copy, group: "Build", description: "Copies the web.xml to the build dir for the war task to pick it up there") {
    from zipTree(configurations.servletContainer.singleFile).matching {
        include "WEB-INF/web.xml"
    }
    into "${buildDir}/webinf"
    filter { String line ->
        line.replace('${application.class}', "ch.ti8m.channelsuite.xservice.ServiceMain")
    }
}

task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'libraries/'
}

joobyRun {
    mainClassName = 'ch.ti8m.channelsuite.xservice.ServiceMainKt'
    compiler = 'on'
    includes = ['**/*.class', '**/*.conf', '**/*.properties']
    excludes = []
    logLevel = 'info'

}

liquibase {
    activities {
        createH2DBschema {
            changeLogFile "src/main/resources/db/changelog/master.xml"
            url "jdbc:h2:file:${buildDir}/h2db;DATABASE_TO_UPPER=false;FILE_LOCK=NO"
            username 'sa'
            password ''
        }
    }
}

pact {

    publish {
        pactDirectory = 'target/pacts' // defaults to $buildDir/pacts
        pactBrokerUrl = 'http://10.10.36.108:80'
    }

}

jooq {
    version = "3.10.7"
    edition = 'TRIAL'
    records(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = "jdbc:h2:file:${buildDir}/h2db"
            user = 'sa'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                inputSchema = 'PUBLIC'
                includes = '.*'
                recordVersionFields = '(version|VERSION)'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = false
            }
            target {
                packageName = 'ch.ti8m.channelsuite.xservice.jooq'
            }
        }
    }
}

war {
    dependsOn copyWebInf

    archiveName = "hello-jooby.war"
    classpath configurations.servletContainer, configurations.runtime

    from("${buildDir}/webinf") {
        include "WEB-INF/*"
    }
}

processResources {
    filter ReplaceTokens, tokens: [
        "project.version": project.version,
        "BUILD_NUMBER"   : envVar("BUILD_NUMBER"),
        "BUILD_ID"       : envVar("BUILD_ID"),
        "GIT_COMMIT"     : envVar("GIT_COMMIT"),
        "GIT_BRANCH"     : envVar("GIT_BRANCH")
    ]
}

task('delete_h2_file')  {
   doLast { delete "${buildDir}/h2db.mv.db" }
   doLast { delete "${buildDir}/h2db.trace.db" }
}

// based on the official recommended build for gradle
// https://github.com/cucumber/cucumber-jvm/blob/master/examples/java-gradle/build.gradle
task cucumber() {
    dependsOn assemble, compileTestKotlin

    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty',
//                    '--plugin', 'html:target/cucumber',
                    '--glue', 'ch.ti8m.channelsuite.config', 'src/test/resources',
                    '--tags', 'not @Ignored']
        }
    }
}

//necessary because of liquibase trying to create the existing changelog table twice:
update.dependsOn delete_h2_file

test.dependsOn cucumber

generateRecordsJooqSchemaSource.dependsOn update
compileKotlin.dependsOn generateRecordsJooqSchemaSource

sourceSets.main.java.srcDir "${project.projectDir}/build/generated-src/jooq/records"
